
max = 500
indicator("Multi-TimeFrame Extremum Points Support/Resistance", "MTF Extrema S/R", true, max_lines_count = max, max_labels_count = max)

// definitions {

tf = input.timeframe("", "Calculations Time Frame")

srGroup = "=====[ Extremum Support/Resistance Levels ]====="
highColor = input.color(color.red, "Level Colors → Highests:", inline = "line", group = srGroup)
lowColor = input.color(color.green, "Lowests:", inline = "line", group = srGroup)
lineWidth = input.int(2, "Lines Width", 1, inline = "lineWidth", group = srGroup)
lineStyle = input.string("Solid", "&", ["Dashed", "Dotted", "Solid"], inline = "lineWidth", group = srGroup)
lineLen = input.int(2, "Lines Length", 1, inline = "lineLen", group = srGroup)
lineExtend = input.bool(true, "Extend Lines", inline = "lineLen", group = srGroup)
mergeLevels = input.bool(true, "Merge Nearby Levels →", inline = "merge", group = srGroup)
mergeColor = input.color(color.blue, "", inline = "merge", group = srGroup)
len = input.int(15, "                         ATR Length", 2, group = srGroup)

lblGroup = "=====[ Labels ]====="
showLabels = input.bool(true, "Show Labels by the Levels", group = lblGroup)
showPercent = input.bool(true, "Show S/R Percentages of Merged Levels", group = lblGroup)
showPrice = input.bool(false, "Show Level Prices", group = lblGroup)

linesStyle = lineStyle == "Dashed" ? line.style_dashed : lineStyle == "Dotted" ? line.style_dotted : line.style_solid
linesExtend = lineExtend ? extend.both : extend.none

var float highPrice = na
var float highestPrice = na
var float lowPrice = na
var float lowestPrice = na
var highBar = 0
var highestBar = 0
var lowBar = 0
var lowestBar = 0
var waitingFor = ""
proximity = request.security("", tf, ta.atr(len / 2) / 2)
initialTransp = 80
transpStep = 2
var levels = array.new_line()
var levelTypes = array.new_int() // high = 1; low = 2; both = 3
var highCounts = array.new_int()
var lowCounts = array.new_int()
var levelLabels = array.new_label()
if array.size(levels) == max
    line.delete(array.shift(levels))
    array.shift(levelTypes)
    array.shift(highCounts)
    array.shift(lowCounts)
    label.delete(array.shift(levelLabels))

//}
// functions {

tfPerCtf(tf) =>
    tfm = timeframe.multiplier
    s = 0.
    if timeframe.isminutes
        s := tfm * 60
    else if timeframe.isdaily
        s := tfm * 60 * 60 * 24
    else if timeframe.isweekly
        s := tfm * 60 * 60 * 24 * 7
    else if timeframe.ismonthly
        s := tfm * 60 * 60 * 24 * 30.4167013889
    else
        s := tfm
    timeframe.in_seconds(tf) / s

ctfBarIndex() =>
    request.security("", "", bar_index)

isHigh() =>
    isHigh = false
    bar = ctfBarIndex()
    price = high
    if close < open
        for i = 1 to 10
            if close[i] < open[i]
                break
            else
                bar := price < high[i] ? ctfBarIndex() - i : bar
                price := math.max(price, high[i])
                if close[i] == open[i]
                    continue
                if close[i] > open[i]
                    isHigh := true
                    break
    [isHigh, bar, price]
isLow() =>
    isLow = false
    bar = ctfBarIndex()
    price = low
    if close > open
        for i = 1 to 10
            if close[i] > open[i]
                break
            else
                bar := price > low[i] ? ctfBarIndex() - i : bar
                price := math.min(price, low[i])
                if close[i] == open[i]
                    continue
                if close[i] < open[i]
                    isLow := true
                    break
    [isLow, bar, price]

labelText(highs, lows, price) =>
    sum = highs + lows
    txt = str.tostring(sum)
    if showPercent
        txt += " (↘" + str.tostring(math.round(highs * 100 / sum)) + "%, ↗" + str.tostring(math.round(lows * 100 / sum)) + "%)"
    if showPrice
        txt += " @ " + str.tostring(price)
    txt

//}
// draw highests and lowests {

linesLen = math.round(lineLen * tfPerCtf(tf))
newLevel = false

[isH, hBar, hPrice] = request.security("", tf, isHigh())
if isH
    if waitingFor != "l" and hPrice < highPrice
        highestBar := highBar
        highestPrice := highPrice
        waitingFor := "l"
        newLevel := true
        array.push(levels, line.new(highestBar - linesLen, highestPrice, highestBar + linesLen, highestPrice, extend = linesExtend, color = color.new(highColor, initialTransp - transpStep), style = linesStyle, width = lineWidth))
        array.push(levelTypes, 1)
        array.push(highCounts, 1)
        array.push(lowCounts, 0)
        array.push(levelLabels, label.new(highestBar, highestPrice, labelText(1, 0, highestPrice), color = na, textcolor = showLabels and mergeLevels ? highColor : na))
    highBar := hBar
    highPrice := hPrice
[isL, lBar, lPrice] = request.security("", tf, isLow())
if isL
    if waitingFor != "h" and lPrice > lowPrice
        lowestBar := lowBar
        lowestPrice := lowPrice
        waitingFor := "h"
        newLevel := true
        array.push(levels, line.new(lowestBar - linesLen, lowestPrice, lowestBar + linesLen, lowestPrice, extend = linesExtend, color = color.new(lowColor, initialTransp - transpStep), style = linesStyle, width = lineWidth))
        array.push(levelTypes, 2)
        array.push(highCounts, 0)
        array.push(lowCounts, 1)
        array.push(levelLabels, label.new(lowestBar, lowestPrice, labelText(0, 1, lowestPrice), color = na, textcolor = showLabels and mergeLevels ? lowColor : na))
    lowBar := lBar
    lowPrice := lPrice

//}
// merge nearby levels {

if newLevel and mergeLevels
    latestLevelPos = array.size(levels) - 1
    latestLevel = array.get(levels, latestLevelPos)
    latestLabel = array.get(levelLabels, latestLevelPos)
    latestLevelType = array.get(levelTypes, latestLevelPos)
    latestLevelPrice = line.get_y1(latestLevel)
    deletedLevels = 0
    for i = 0 to array.size(levels) - 2
        if i > array.size(levels) - 2
            break
        if math.abs(latestLevelPrice - line.get_y1(array.get(levels, i - deletedLevels))) < proximity
            latestPos = array.size(levelTypes) - 1
            sumH = array.get(highCounts, latestPos) + array.get(highCounts, i - deletedLevels)
            sumL = array.get(lowCounts, latestPos) + array.get(lowCounts, i - deletedLevels)
            label.set_text(latestLabel, labelText(sumH, sumL, latestLevelPrice))
            transp = initialTransp - (sumH + sumL) * transpStep
            if latestLevelType != array.get(levelTypes, i - deletedLevels)
                line.set_color(latestLevel, color.new(mergeColor, transp))
                array.set(levelTypes, latestPos, 3)
                array.set(highCounts, latestPos, sumH)
                array.set(lowCounts, latestPos, sumL)
                label.set_textcolor(latestLabel, showLabels and mergeLevels ? sumH > sumL and showPercent ? highColor : sumL > sumH and showPercent ? lowColor : mergeColor : na)
                latestLevelType := 3
            else
                if latestLevelType == 1
                    line.set_color(latestLevel, color.new(highColor, transp))
                else if latestLevelType == 2
                    line.set_color(latestLevel, color.new(lowColor, transp))
                else
                    line.set_color(latestLevel, color.new(mergeColor, transp))
            line.delete(array.remove(levels, i - deletedLevels))
            array.remove(levelTypes, i - deletedLevels)
            array.remove(highCounts, i - deletedLevels)
            array.remove(lowCounts, i - deletedLevels)
            label.delete(array.remove(levelLabels, i - deletedLevels))
            deletedLevels += 1

//}
// relocate labels {

if lineExtend
    for levelLabel in levelLabels
        label.set_x(levelLabel, bar_index + 8)

//}
