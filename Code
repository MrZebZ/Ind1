
maxLines = 500
study("Stronger Classical Support/Resistance + Round Levels", "Stronger S/R", true, max_lines_count = maxLines, max_labels_count = maxLines)

// inputs and definitions {

showRets = input(true, "Show Retracements/Pullbacks Count on S/R Levels")
extendLine = input("Both Sides", "Extend S/R Lines to", options = ["None", "Left", "Right", "Both Sides"])
supportColor = input(color.green, "Support Levels Color")
resistanceColor = input(color.red, "Resistance Levels Color")
srColor = input(color.blue, "Both S&R Levels Color")
showRounds = input(true, "Show Forex Round Levels", inline = "Round")
roundColor = input(color.black, ":", inline = "Round")

color levelColor = na
int levelBar = na
int levelType = na
int levelRepeat = 1
float levelPrice = na

var rounds = array.new_line()
var levels = array.new_line()
var prices = array.new_float()
var types = array.new_int() // support = 1; resistance = 2; both = 3
var repeats = array.new_int()
var labels = array.new_label()

proximity = atr(20) / 2
roundsCount = 4 // an even number
roundsCount := syminfo.type == "forex" and showRounds ? roundsCount : 0
minTick = syminfo.mintick

//}
// find strong high pivots {

pivotHigh() =>
    wasStrongHigh = false
    if close < open and close < open[1] and close < open[2]
        for i = 3 to 9
            if close[i] == open[i]
                continue
            else if close[i] > open[i]
                wasStrongHigh := true
                break
            else
                break
    if wasStrongHigh
        high[2] < high[3] ? bar_index[2] : bar_index[3]

//}
// find strong low pivots {

pivotLow() =>
    wasStrongLow = false
    if close > open and close > open[1] and close > open[2]
        for i = 3 to 9
            if close[i] == open[i]
                continue
            else if close[i] < open[i]
                wasStrongLow := true
                break
            else
                break
    if wasStrongLow
        low[2] > low[3] ? bar_index[2] : bar_index[3]

//}
// draw & combine s/r levels {

h = pivotHigh()
l = pivotLow()

if not na(h)
    levelBar := h
    levelType := 2
    levelPrice := high[bar_index - h]
    levelColor := resistanceColor
if not na(l)
    levelBar := l
    levelPrice := low[bar_index - l]
    levelType := 1
    levelColor := supportColor
if not (na(h) and na(l))
    combinedLevels = 0
    for i = 0 to array.size(levels) - 1
        j = i - combinedLevels
        if array.size(levels) <= j
            break
        if abs(levelPrice - array.get(prices, j)) < proximity
            if levelType != array.get(types, j)
                levelType := 3
                levelColor := srColor
            levelRepeat += array.get(repeats, j)
            line.delete(array.remove(levels, j))
            array.remove(prices, j)
            array.remove(types, j)
            array.remove(repeats, j)
            label.delete(array.remove(labels, j))
            combinedLevels += 1
    array.push(levels, line.new(levelBar, levelPrice, bar_index, levelPrice, extend = extendLine == "None" ? extend.none : extendLine == "Left" ? extend.left : extendLine == "Right" ? extend.right : extend.both, color = color.rgb(color.r(levelColor), color.g(levelColor), color.b(levelColor), 80 - levelRepeat), style = line.style_solid, width = 2))
    array.push(prices, levelPrice)
    array.push(types, levelType)
    array.push(repeats, levelRepeat)
    array.push(labels, label.new(bar_index, levelPrice, tostring(levelRepeat), xloc.bar_time, color = na, textcolor = showRets ? color.rgb(color.r(levelColor), color.g(levelColor), color.b(levelColor)) : na))

//}
// delete useless s/r levels {

if array.size(levels) > maxLines - roundsCount
    line.delete(array.shift(levels))
    array.shift(prices)
    array.shift(types)
    array.shift(repeats)
    label.delete(array.shift(labels))

//}
// relocate counter labels {

if showRets and array.size(labels) > 0
    for i = 0 to array.size(labels) - 1
        label.set_x(array.get(labels, i ), time + (time - time[1]) * 5)

//}
// draw round levels {

if roundsCount > 0
    if array.size(rounds) > 0
        for i = 1 to roundsCount
            line.delete(array.pop(rounds))
    for i = 0 to (roundsCount / 2) - 1
        r1 = (floor(close / minTick / 100) - i) * minTick * 100
        r2 = (ceil(close / minTick / 100) + i) * minTick * 100
        array.push(rounds, line.new(bar_index[1], r1, bar_index, r1, extend = extend.both, color = roundColor, style = line.style_dashed))
        array.push(rounds, line.new(bar_index[1], r2, bar_index, r2, extend = extend.both, color = roundColor, style = line.style_dashed))

//}
